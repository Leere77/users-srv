package ru.mirea.userssrv;

public interface Admin extends User{
    /**
     * Создание пользователя администратором.
     * userName проверка на количество символов (не менее 8, неболее 20), проверка на только буквы, проверка на существование идентичного имени пользователя в базе данных.
     * Password проверка на количество символов (не менее 8, неболее 20), проверка на наличие цифр, строчных и прописных букв (должен быть хотя бы 1 символ каждого типа из перечисленных), проверка на совпадение паролей из двух полей.
     * password проверка на количество символов (не менее 8, неболее 20), проверка не наличие цифр, строчных и прописных букв (должен быть хотя бы 1 символ каждого типа из перечисленных), проверка на совпадение паролей из двух полей.
     * userID 8-значный код, генерируется путем прибавления еденицы к идентификатору последнего созданного пользователя, начельное значение 10000000 (идентифткатор первого администратора).
     * @param userName /Имя пользователя.
     * @param Password /Пароль пользователя.
     * @param password /Повтоп пароля пользователя.
     * @param userID /
     * @throws ErrorBadData /Проверка на количество символов, проверка на только буквы.
     * @throws ErrorCloneUser /Проверка на существование идентичного имени пользователя в базе данных.
     * @throws ErrorIncesecurePassword /Проверка на наличие цифр, строчных и прописных букв(хотя бы 1 символ каждого типа из перечисленных), проверка на количество символов (не менее 8, неболее 20).
     * @throws ErrorLevelAccess /Проверка на 0 или 1.
     * @version 1.0
     * @author Markin T. M.<tixomark@mail.ru>
     */
    void adminOnlyUserCreate (String userName, String Password, String password, int level)
    throws ErrorBadData, ErrorCloneUser, ErrorIncesecurePassword, ErrorLevelAccess;

    /**
     * Смена уровня доступа для существующего пользователя.
     * userID уровень доступа которого нужно изменить, проверка на наличие пользователя с таким идентификатором.
     * userLevelUpdate проверка на 0 или 1, проверка на совпадение с текущим уровнем доступа для пользователя, уровень доступа которого нужно изменить.
     * @param userID /Иидентификатор пользователя.
     * @param userLevelUpdate /Новый уровень доступа для существующего пользователя (1-рядовой, 2-администратор).
     * @throws ErrorIncorrectUserData /Проверка на существование данного пользователя в базе данных.
     */
    void adminOnlyUpdateUserLevel (int userID, int userLevelUpdate)
    throws ErrorIncorrectUserData;
}
